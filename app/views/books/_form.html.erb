<%= form_for(@book, html: { class: 'form-horizontal' }) do |f| %>
  <% if @book.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@book.errors.count, "error") %> prohibited this book from being saved:</h2>

      <ul>
      <% @book.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  
  <% [:title, :subtitle, :call_number, :author, :illustrator, :series].each do |attr| %>
    <div class="control-group">
      <%= f.label attr, class: 'control-label' %>
      <div class="controls">
        <%= f.text_field attr %>
      </div>
    </div>
  <% end %>
  <% [:subjects, :categories].each do |attr| %>
    <div class="control-group">
      <%= f.label attr, class: 'control-label' %>
      <div class="controls">
        <%= text_field_tag attr, print_list(@book.send(attr)), class: 'span6' %>
        <span class="label label-warning">Separate new <%= attr %> by a comma</span>
      </div>
    </div>
  <% end %>
  <div class="control-group">
    <%= f.label :book_type, class: 'control-label' %>
    <div class="controls">
      <%= f.select :book_type, options_for_select(@book_types) %>
    </div>
  </div>
  <div class="control-group">
    <%= f.label :more_information, class: 'control-label' %>
    <div class="controls">
      <%= f.text_area :more_information, class: 'span6', rows: 4 %>
    </div>
  </div>
  <div class="control-group">
    <div class="controls">
      <%= f.submit %>
    </div>
  </div>
<% end %>

<script>

  $(function(){
    
    $.getJSON('<%= tags_url %>', null, function(data){
      var subjects = []
          categories = [];
      $.each(data, function(i, tag){
        if (tag.tag_type == '<%= Tag.subject_type %>'){
          subjects.push(tag.name);
        } else {
          categories.push(tag.name);
        }
      });
      
      $('#subjects')
        // don't navigate away from the field on tab when selecting an item
        .bind( "keydown", function( event ) {
          if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).data( "ui-autocomplete" ).menu.active ) {
            event.preventDefault();
          }
        })
        .autocomplete({
          minLength: 0,
          source: function( request, response ) {
            // delegate back to autocomplete, but extract the last term
            response( $.ui.autocomplete.filter(
              subjects, extractLast( request.term ) ) );
          },
          focus: function() {
            // prevent value inserted on focus
            return false;
          },
          select: function( event, ui ) {
            var terms = split( this.value );
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push( ui.item.value );
            // add placeholder to get the comma-and-space at the end
            terms.push( "" );
            this.value = terms.join( ", " );
            return false;
          }
        });

      $('#categories')
        // don't navigate away from the field on tab when selecting an item
        .bind( "keydown", function( event ) {
          if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).data( "ui-autocomplete" ).menu.active ) {
            event.preventDefault();
          }
        })
        .autocomplete({
          minLength: 0,
          source: function( request, response ) {
            // delegate back to autocomplete, but extract the last term
            response( $.ui.autocomplete.filter(
              categories, extractLast( request.term ) ) );
          },
          focus: function() {
            // prevent value inserted on focus
            return false;
          },
          select: function( event, ui ) {
            var terms = split( this.value );
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push( ui.item.value );
            // add placeholder to get the comma-and-space at the end
            terms.push( "" );
            this.value = terms.join( ", " );
            return false;
          }
        });
      
      
      
      
    });    
    
    function split( val ) {
      return val.split( /,\s*/ );
    }
    function extractLast( term ) {
      return split( term ).pop();
    }
    
  });
  
</script>
